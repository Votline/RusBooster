package utils

import (
	"os"
	"fmt"
	"log"
	"sort"
	"time"
	"strconv"
	"unicode"
	"math/rand"

	_ "github.com/lib/pq"
	"github.com/jmoiron/sqlx"
	sq "github.com/Masterminds/squirrel"
)

func ContainsRune(text string, item string) bool {
	for _, r := range text {
		if string(r) == item {
			return true
		}
	}
	return false
}

func Contains(slice []string, item string) bool {
	for _, value := range slice {
		if value == item {
			return true
		}
	}
	return false
}

func FindUpperCase(word string) rune {
	for _, r := range word {
		if unicode.IsUpper(r) {
			return r
		}
	}
	return 0
}

func AllEqual(letters []rune) bool {
	if len(letters) == 0 {
		return false
	}
	for _, r := range letters {
		if r != letters[0] {
			return false
		}
	}
	return true
}

func getDigitHash(s string) string {
	runes := []rune(s)
	sort.Slice(runes, func(i, j int) bool { return runes[i] < runes[j] })
	return string(runes)
}

func CheckEquals(correct, verifiable string) bool {
	correct = getDigitHash(correct)
	verifiable = getDigitHash(verifiable)
	return correct == verifiable
}

func SumDigits(number int) int {
	sum := 0
	for number > 0 {
		digit := number % 10
		sum += digit
		number /= 10
	}
	return sum
}

func ActionAfter(action func() error, delay int, errMessage string) {
	go func() {
		time.Sleep(time.Duration(delay) * time.Second)
		if err := action(); err != nil {
			log.Printf("%s: %v", errMessage, err)
		}
	}()
}

func HandleError(action func() error, errMsg string) string {
	if err := action(); err != nil {
		log.Printf("%s: %v", errMsg, err)
		return GetReturnText(false)
	}
	return ""
}

func GetDb() (*sqlx.DB, sq.StatementBuilderType) {
	dbUser := os.Getenv("POSTGRES_USER")
	dbName := os.Getenv("POSTGRES_DB")
	dbPort := os.Getenv("POSTGRES_PORT")
	dbPass := os.Getenv("POSTGRES_PASSWORD")

	dsn := "host=postgres port=" + dbPort + " user=" + dbUser + " dbname=" + dbName + " password=" + dbPass + " sslmode=disable"

	db, err := sqlx.Connect("postgres", dsn)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö rsdb: %v", err)
	}
	psql := sq.StatementBuilder.PlaceholderFormat(sq.Dollar)
	return db, psql
}

func GetTimeZoneForm(timeZone int) string {
	if timeZone > 0 {
		return fmt.Sprintf("+%d –æ—Ç –ú–°–ö", timeZone)
	} else if timeZone < 0 {
		return fmt.Sprintf("-%d –æ—Ç –ú–°–ö", timeZone)
	} else {
		return "–ú–°–ö"
	}
}

func GetReturnText(newUser bool) string {
	rand.Seed(time.Now().UnixNano())
	var newUserPhrases = []string{
		"üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å... –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑ üöÄ",
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–µ–π—á–∞—Å –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏–º. –ü—Ä–æ—Å—Ç–æ –µ—â—ë —Ä–∞–∑ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
		"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å üöÄ",
	}
	var errorPhrases = []string{
		"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üîÅ",
		"–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É üëá",
		"–ú—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π üò¢ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑",
		"–ö–∞–∂–µ—Ç—Å—è, –≤—Å—ë –Ω–µ —Ç–∞–∫ –≥–ª–∞–¥–∫–æ üß© –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ ‚Äî —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø–æ–º–æ—á—å!",
		"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ù–æ –Ω–∏—á–µ–≥–æ! –ü—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ü§ù",
	}
	if newUser {
		return newUserPhrases[rand.Intn(len(newUserPhrases))]
	} else {
		return errorPhrases[rand.Intn(len(errorPhrases))]
	}
}

func ToInt(value interface{}) (int, error) {
	switch v := value.(type) {
	case int:
		return v, nil
	case int64:
		return int(v), nil
	case float64:
		return int(v), nil
	case string:
		return strconv.Atoi(v)
	default:
		return 0, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: %T", value)
	}
}

func GetDayForm(days int) string {
	if days == 1 {
		return "–¥–µ–Ω—å"
	} else if days >= 2 && days <= 4 {
		return "–¥–Ω—è"
	} else {
		return "–¥–Ω–µ–π"
	}
}
